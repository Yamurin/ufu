/*
* http://www2.ic.uff.br/~boeres/slides_FAC/FAC-complemento-um-e-dois.pdf
* http://www.furtado.prof.ufu.br/site/teaching/SD/SD-Modulo2.pdf
* https://edisciplinas.usp.br/pluginfile.php/4228767/mod_resource/content/1/complemento2.pdf
* https://www.doc.ic.ac.uk/~eedwards/compsys/arithmetic/index.html
*/

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>  // Biblioteca para exibir caracteres do PT-BR

#define STR_BUF 1024

/* PROTÓTIPOS DE FUNÇÕES */
int* sum_binary  (int** num1, int** num2, int num1Len, int num2Len);
int* sub_binary  (int** num1, int** num2, int num1Len, int num2Len);
int* mult_binary (int** num1, int** num2, int num1Len, int num2Len, int* productLen);
int* div_binary (int** num1, int** num2, int num1Len, int num2Len, char opt);
int bin_to_dec(int** num, int numLen);
int* pow_binary (int** base, int** pow, int baseLen, int powLen, int* resultLen);
int* fact_binary(int** base, int baseLen, int* printlLen);

void printBin  (int** bin, int len);
int  printMenu (void);

int  get_binary (int **bin);
int* complement (int **bin, int binLen);



int main ()
{
    setlocale(LC_ALL, "Portuguese");
    setbuf(stdout, NULL);

    int* num1  = NULL;
    int* num2  = NULL;
    int* total = NULL;
    int num1Len, num2Len;         // Quantidade de dígitos nos operadores e no resultado.
    int totalLen;

    while (1) {         // tirar repetição deentrada de caracters

        switch (printMenu())
        {
            case 1:
                num1Len = get_binary(&num1);
                printf("+\n");
                num2Len = get_binary(&num2);

                totalLen = num1Len > num2Len ? num1Len : num2Len;

                printBin(&num1, num1Len);
                printf(" + ");
                printBin(&num2, num2Len);
                printf("\n= ");

                total = sum_binary(&num1, &num2, num1Len, num2Len);
                break;

            case 2:
                num1Len = get_binary(&num1);
                printf("- ");
                num2Len = get_binary(&num2);

                totalLen = num1Len > num2Len ? num1Len : num2Len;

                total = sub_binary(&num1, &num2, num1Len, num2Len);
                break;

            case 3:
                num1Len = get_binary(&num1);
                printf("* ");
                num2Len = get_binary(&num2);

                total = mult_binary(&num1, &num2, num1Len, num2Len, &totalLen);
                break;

            case 4:
                num1Len = get_binary(&num1);
                printf("/ ");
                num2Len = get_binary(&num2);

                totalLen = num1Len > num2Len ? num1Len : num2Len;

                total = div_binary(&num1, &num2, num1Len, num2Len, 'q');
                break;

            case 5:
                num1Len = get_binary(&num1);
                printf("/ ");
                num2Len = get_binary(&num2);

                totalLen = num1Len;

                total = div_binary(&num1, &num2, num1Len, num2Len, 'r');
                break;

            case 6:
                num1Len = get_binary(&num1);
                printf("^ ");
                num2Len = get_binary(&num2);

                total = pow_binary (&num1, &num2, num1Len, num2Len, &totalLen);
                break;

            case 7: // complemento
                num1Len = get_binary(&num1);
                totalLen = num1Len;

                total = complement(&num1, num1Len);
                break;

            case 8: // fatorial
                num1Len = get_binary(&num1);
                total = fact_binary(&num1, num1Len, &totalLen);
                break;

            case 9: // Binário para Decimal
                num1Len = get_binary(&num1);
                totalLen = num1Len;

                int dec;
                dec = bin_to_dec(&num1, num1Len);
                printf("Decimal: %d\n", dec);
                break;

            case 10: // Binário para Hexadecimal
                num1Len = get_binary(&num1);
                totalLen = num1Len;

                dec = bin_to_dec(&num1, num1Len);
                printf("Hexadecimal: %x\n", dec);
                break;

            case 11: // Binário para Hexadecimal
                num1Len = get_binary(&num1);
                totalLen = num1Len;

                dec= bin_to_dec(&num1, num1Len);
                printf("Octal: %o\n", dec);
                break;

            case 12:
                printf("Saindo do sistema...");
                // free memoria
                exit(1);
        }
        if (total != NULL)
        printBin(&total, totalLen);
    }
    return 0;
}

/*
 *  CONVERTE UMA STRING EM UM VETOR COM DÍGITOS CORRESPONDENTES.
 *  Parâmetro: String digitada pelo usuário.
 *  Ação:      Aloca dinamicamente um vetor com todos os dígitos da string, representando um número binário.
 *  Retorna:   Número de dígitos do número binário (vetor) alocado.
 */
int get_binary (int **bin)
{
    char binStr[STR_BUF];
    setbuf(stdin, NULL);
    fgets(binStr, STR_BUF, stdin);

    int binLen = 0;                              // Número de dígitos da entrada

    for (int i = 0; binStr[i] != '\0' && binStr[i] != '\n'; i++) {
        binLen++;
        *bin = realloc(*bin, sizeof(int) * binLen);

        if (*bin == NULL) {
            printf("Falha ao alocar memória. Reinicie o programa.\n");
            exit(1);
        }

        (*bin)[i] = binStr[i] == '1' ? 1 : 0;
    }

    return binLen;
}

/*
 *  FAZ A SOMA BINÁRIA ENTRE DOIS NÚMEROS DE MESMO SINAL TODO: Prevenir casos de overflow
 *  Parâmetro: Dois números binários (vetores), quantidades de dígitos de cada vetor.
 *  Ação:      Faz a soma binária, seguindo a notação do complemento de 2 (onde o "carry" do número mais significativo é desprezado).
 *  Retorna:   Vetor com o resultado da soma binária dos números de parâmetro.
 */
int* sum_binary (int** num1, int** num2, int num1Len, int num2Len)
{
    int* total = NULL;
    int totalLen;

    int idx1 = num1Len - 1;
    int idx2 = num2Len - 1;

    int carry  = 0;

    totalLen = num1Len > num2Len ? num1Len : num2Len;           // O resultado tem tantos dígitos quanto o maior numero
    total = calloc(totalLen, sizeof(int));

    for (int i = totalLen - 1; i >= 0; i--) {                   // Despreza o último carry, se houver
        int auxSum = 0 + carry;

        if (idx1 >= 0) {
            auxSum += (*num1)[idx1];
            idx1--;
        } else {
            if ((*num1)[0] == 1)
                auxSum += 1;
        }

        if (idx2 >= 0) {
            auxSum += (*num2)[idx2];
            idx2--;
        } else {
            if ((*num2)[0] == 1)
                auxSum += 1;
        }

        if (auxSum <= 1) {
            carry = 0;
        } else {
            auxSum = auxSum % 2;                                // Soma o 'carry' ao dígito, mas sem sobrescrever o valor da soma desse mesmo dígito com o próximo
            carry = 1;
        }

        total[i] = auxSum;
    }

    // Previne overflow
    if (   ((*num1)[0] == 0 && (*num2)[0] == 0 && total[0] == 1)
           || ((*num1)[0] == 1 && (*num2)[0] == 1 && total[0] == 0) ) {
        printf("ERRO DE OVERFLOW: Estes números não podem ser somados no sistema de representação de complemento de 2.");
        printf("Por favor, insira números com mais bits.\n");
        return NULL;
    }

    return total;
}

/*
 *  IMPRIME AS OPÇÕES DE OPERAÇÕES NA TELA.
 *  Parâmetro: Nada
 *  Ação:      Imprime texto na tela.
 *  Retorna:   Inteiro com o número da opção escolhida pelo usuário.
 */
int printMenu (void)
{
    printf("\nSelecione a operação: ");
    printf("\n1. Soma \n2. Subtração\n3. Multiplicação\n4. Divisão\n5. Resto\n6. Potência");
    printf("\n7. Absoluto\n8. Fatorial\n9. Converter binário para decimal");
    printf("\n10. Converter binário para hexadecimal\n");
    printf("11. Converter binário para octal\n");

    int escolha;
    scanf("%d", &escolha);

    printf("Digite um número (Notação em complemento de 2): \n  ");

    return escolha;
}

/*
 *  PERCORRE O NÚMERO BINÁRIO E O MOSTRA NA TELA DE FORMA CONTÍNUA.
 */
void printBin (int** bin, int len)
{
    int i = 0;
    while (i < len) {
        printf("%d", (*bin)[i]);
        i++;
    }
}

/*
 *  CALCULA A NEGAÇÃO DE UM NÚMERO BINÁRIO: Inverte os bits e soma +1
 *  Parâmetro: Vetor com o número binário (no sistema de representação do complemento de 2) a ser convertido
 *  Ação:      Faz o complemento de 2 do número de entrada: Inverte os bits e soma +1 (em notação de comp. 2: 01)
 *  Retorna:   Vetor com o número binário complemento
 */
int* complement (int **bin, int binLen)
{
    int* auxBin;    // Binário que representa +1 (01 em comp. 2)
    int* result = calloc(binLen, sizeof(int));

    for (int i = 0; i < binLen; i++)
        result[i] = (*bin)[i] == 0 ? 1 : 0;

    auxBin = calloc(2 , sizeof(int));
    auxBin[0] = 0;
    auxBin[1] = 1;

    result = sum_binary(&result, &auxBin, binLen, 2);
    return result;
}

int* sub_binary (int** num1, int** num2, int num1Len, int num2Len)
{
    int* total = NULL;
    int* addend = *num2;

    for (int i = 0; i < num2Len; i++)
        addend[i] = (*num2)[i];

    addend = complement(&addend, num2Len);

    total = sum_binary(num1, &addend, num1Len, num2Len);

    // Previne overflow
    if (   ((*num1)[0] == 0 && addend[0] == 0 && total[0] == 1)
           || ((*num1)[0] == 1 && addend[0] == 1 && total[0] == 0) ) {
        printf("ERRO DE OVERFLOW: Estes números não podem ser somados no sistema de representação de complemento de 2. Por favor, insira números com mais bits.");
        return NULL;
    }

    return total;
}

/*
 * Multiplicar todos os numeros como sendo positivos
 * fazer o complemento doproduto se necessário, seguindo rega de sinal
 */
int* mult_binary (int** num1, int** num2, int num1Len, int num2Len, int* productLen) {

    int switchSign = 0;
    int totalLen = num1Len * 2;
    int* total = total = calloc(totalLen, sizeof(int));

    if ((*num1)[0] != (*num2)[0])
        switchSign = 1;

    if(bin_to_dec(num2, num2Len) == 0)
    {
        total[totalLen - 1] = 1;
        *productLen = totalLen;
        return total;
    }

    if(bin_to_dec(num2, num2Len) == 1 || bin_to_dec(num1, num1Len) == 1)
    {
        *productLen = num1Len;
        return *num1;
    }

    /* Utiliza somente números positivos na multiplicação */
    if ((*num2)[0] == 1)
        *num2 = complement(num2, num2Len);
    if ((*num1)[0] == 1)
        *num1 = complement(num1, num1Len);

    int j, k;

    int dec = bin_to_dec(num2, num2Len);

    /* Valor positivo */
    for(int i = 0; i < dec; i++)
        total = sum_binary(&total, num1, totalLen, num1Len);

    //Remove zeros que ficam "sobrando" no começo do número
    for (j = 0; j < totalLen; j++)
        if (total[j] != 0)
            break;
    j--;

    for (k = 0; j < totalLen; k++, j++)
        total[k] = total[j];

    total = realloc(total, k * sizeof(int));

    /*APlica regra de sinais, se necessário*/
    if (switchSign == 1)
        total = complement(&total, k);

    *productLen = k;        // variável usada exclusivamente para imprimir o resultado na tela, quando necessário
    return total;
}

int bin_to_dec(int** num, int numLen)
{
    int dec = 0;                // Valor decimal
    int flipSign = 0;           // 0- Sinal NÃO precisa ser alterado, 1- Sinal precisa ser alterado
    int pow = 1;                // Valor decimal de cada posição binária

    /* Verifica se o número a ser convertido é negativo.  */
    if ((*num)[0] == 1) {
        *num = complement(num, numLen);
        flipSign = 1;
    }

    /* Para cada posição binária,s oma o valor decimal correspondente (1, 2, 4, 8...) */
    for (int i = numLen - 1; i > 0; i--) {
        pow = 1;
        for (int j = numLen - 1; j > i; j--)
            pow *= 2;
        dec += (*num)[i] * pow;
    }

    if (flipSign == 1)
        return (dec * (-1));

    return dec;
}

int* pow_binary (int** base, int** pow, int baseLen, int powLen, int* resultLen)
{
    int switchSign = 0;
    int oddTest = bin_to_dec(pow, powLen);      // testar se o expoente é ímpar

    /*Se a base for ímpar e o expoente também for ímpar, alterar o sinal do resultado*/
    if ( (*base)[0] == 1 && (oddTest % 2 != 0) )
        switchSign = 1;

    if ((*base)[0] == 1)
        *base = complement(base, baseLen);

    int* total = *base;
    int powDec = bin_to_dec(pow, powLen);       // Expoente decimal
    int totalLen = baseLen;

    // Multiplica r abase por ela mesma powDec vezes
    for (int i = 0; i < powDec - 1; i++)
        total = mult_binary(base, &total, baseLen, totalLen, &totalLen);

    /*Altera o sinal se a base é negativa e o expoente é ímpar*/
    *resultLen = totalLen;

    if (switchSign == 1)
        return complement(&total, totalLen);
    else
        return total;
}

int* fact_binary(int** base, int baseLen, int* printlLen)
{

    int* aux = calloc(2, sizeof(int));
    aux[0] = 0;
    aux[1] = 1;
    int* counter = *base;   // All integers below the base

    counter = sub_binary(&counter, &aux, baseLen, 2);

    int* partial = *base;
    int totalLen = baseLen;
    int* total = calloc(baseLen*2, sizeof(int));

    for (int i = 0; i <= bin_to_dec(base, baseLen); i++) {
        partial = mult_binary(&partial, &counter, totalLen, baseLen, &totalLen);
        total = sum_binary(&total, &partial, totalLen, totalLen);
        counter = sub_binary(&counter, &aux, baseLen, 2);
    }

    printf("fatorial: ");
    printBin(&partial, totalLen);
    printf("\n");
    return NULL;
}

int* div_binary (int** num1, int** num2, int num1Len, int num2Len, char opt) // divisão e resto
{
    /* Número 01 em binário */
    int* aux = calloc(2, sizeof(int));
    aux[0] = 0;
    aux[1] = 1;

    int switchSign = 0;
    if ((*num1)[0] != (*num2)[0])
        switchSign  = 1;

    if(bin_to_dec(num2, num2Len) == 0) {
       printf("Não é possível dividir por zero.\n");
       return NULL;
    }

    if ((*num2)[0] == 1)
        *num2 = complement(num2, num2Len);
    if ((*num1)[0] == 1)
        *num1 = complement(num1, num1Len);

    int* quoc = calloc(num1Len, sizeof(int));

    int remainLen = num1Len > num2Len ? num1Len : num2Len;
    int* remain = *num1;

    if(bin_to_dec(num2, num2Len) != 1 && bin_to_dec(num1, num1Len) != 1) {
        /* Subtrair o resto do divisor até que o resto seja maior que o próprio divisor */
        while(bin_to_dec(&remain, remainLen) >= bin_to_dec(num2, num2Len)) {
            remain = sub_binary(&remain, num2, remainLen, num2Len);
            quoc   = sum_binary(&quoc, &aux, num1Len, 2);
        }
    }

    if (switchSign == 1)
    {
        printf("switch\n");
        remain = complement(&remain, remainLen);
        quoc = complement(&quoc, num1Len);
    }

    if (opt == 'r')
        return remain;  // total is actually the remain
    else if (opt == 'q')
        return quoc;
}
