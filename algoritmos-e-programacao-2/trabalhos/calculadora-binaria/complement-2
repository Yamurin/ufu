/*
* http://www2.ic.uff.br/~boeres/slides_FAC/FAC-complemento-um-e-dois.pdf
* http://www.furtado.prof.ufu.br/site/teaching/SD/SD-Modulo2.pdf
* https://edisciplinas.usp.br/pluginfile.php/4228767/mod_resource/content/1/complemento2.pdf
* https://www.doc.ic.ac.uk/~eedwards/compsys/arithmetic/index.html
*/

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>  // Biblioteca para exibir caracteres do PT-BR

#define STR_BUF 1024

/* PROTÓTIPOS DE FUNÇÕES */
int* sum_binary  (int** num1, int** num2, int num1Len, int num2Len);
int* sub_binary  (int** num1, int** num2, int num1Len, int num2Len);
int* mult_binary (int** num1, int** num2, int num1Len, int num2Len);

void printBin  (int** bin, int len);
int  printMenu (void);

int  get_binary (int **bin);
int* complement (int **bin, int binLen);

int main ()
{
    setlocale(LC_ALL, "Portuguese");
    setbuf(stdout, NULL);

    int* num1  = NULL;
    int* num2  = NULL;
    int* total = NULL;
    int num1Len, num2Len;         // Quantidade de dígitos nos operadores e no resultado.
    int totalLen;

    while (1) {
        switch (printMenu())
        {
            case 1:
                num1Len = get_binary(&num1);
                printf("+\n");
                num2Len = get_binary(&num2);

                totalLen = num1Len > num2Len ? num1Len : num2Len;

                printBin(&num1, num1Len);
                printf(" + ");
                printBin(&num2, num2Len);
                printf("\n= ");

                total = sum_binary(&num1, &num2, num1Len, num2Len);
                break;

            case 2:
                num1Len = get_binary(&num1);
                printf("- ");
                num2Len = get_binary(&num2);

                totalLen = num1Len > num2Len ? num1Len : num2Len;

                total = sub_binary(&num1, &num2, num1Len, num2Len);
                break;

            case 3:
                num1Len = get_binary(&num1);
                printf("* ");
                num2Len = get_binary(&num2);

                totalLen = num1Len > num2Len ? 2 * num1Len : 2 * num2Len;
                total = mult_binary(&num1, &num2, num1Len, num2Len);

                break;

            case 4:
                num1Len = get_binary(&num1);
                totalLen = num1Len;
                total = complement(&num1, num1Len);
                break;

            case 12:
                printf("Saindo do sistema...");
                // free memoria
                exit(1);
        }
        if (total != NULL)
            printBin(&total, totalLen);
    }
    return 0;
}

/*
 *  CONVERTE UMA STRING EM UM VETOR COM DÍGITOS CORRESPONDENTES.
 *  Parâmetro: String digitada pelo usuário.
 *  Ação:      Aloca dinamicamente um vetor com todos os dígitos da string, representando um número binário.
 *  Retorna:   Número de dígitos do número binário (vetor) alocado.
 */
int get_binary (int **bin)
{
    char binStr[STR_BUF];
    setbuf(stdin, NULL);
    fgets(binStr, STR_BUF, stdin);

    int binLen = 0;                              // Número de dígitos da entrada

    for (int i = 0; binStr[i] != '\0' && binStr[i] != '\n'; i++) {
        binLen++;
        *bin = realloc(*bin, sizeof(int) * binLen);

        if (*bin == NULL) {
            printf("Falha ao alocar memória. Reinicie o programa.\n");
            exit(1);
        }

        (*bin)[i] = binStr[i] == '1' ? 1 : 0;
    }

    return binLen;
}

/*
 *  FAZ A SOMA BINÁRIA ENTRE DOIS NÚMEROS DE MESMO SINAL TODO: Prevenir casos de overflow
 *  Parâmetro: Dois números binários (vetores), quantidades de dígitos de cada vetor.
 *  Ação:      Faz a soma binária, seguindo a notação do complemento de 2 (onde o "carry" do número mais significativo é desprezado).
 *  Retorna:   Vetor com o resultado da soma binária dos números de parâmetro.
 */
int* sum_binary (int** num1, int** num2, int num1Len, int num2Len)
{
    int* total = NULL;
    int totalLen;

    int idx1 = num1Len - 1;
    int idx2 = num2Len - 1;

    int carry  = 0;

    totalLen = num1Len > num2Len ? num1Len : num2Len;           // O resultado tem tantos dígitos quanto o maior numero
    total = calloc(totalLen, sizeof(int));

    for (int i = totalLen - 1; i >= 0; i--) {                       // Despreza o último carry, se houver
        int auxSum = 0 + carry;

        //printf("\ntotal[%d]: ", i);
        if (idx1 >= 0) {
            auxSum += (*num1)[idx1];
            //printf("%d + ", (*num1)[idx1]);
            idx1--;
        } else {
            //printf("1 + ");
            if ((*num1)[0] == 1)
                auxSum += 1;
        }

        if (idx2 >= 0) {
            auxSum += (*num2)[idx2];
            //printf("%d + ", (*num2)[idx2]);
            idx2--;
        } else {
            //printf("1 + ");
            if ((*num2)[0] == 1)
                auxSum += 1;
        }

        //printf("%d = ", carry);

        if (auxSum <= 1) {
            carry = 0;
        } else {
            auxSum = auxSum % 2;          // Soma o 'carry' ao dígito, mas sem sobrescrever o valor da soma desse mesmo dígito com o próximo
            carry = 1;
        }

        total[i] = auxSum;
        //printf("%d (+ %d)\n", auxSum, carry);
    }

    // Previne overflow
    if (   ((*num1)[0] == 0 && (*num2)[0] == 0 && total[0] == 1)
           || ((*num1)[0] == 1 && (*num2)[0] == 1 && total[0] == 0) ) {
        printf("ERRO DE OVERFLOW: Estes números não podem ser somados no sistema de representação de complemento de 2. Por favor, insira números com mais bits.");
        return NULL;
    }

    return total;
}

/*
 *  IMPRIME AS OPÇÕES DE OPERAÇÕES NA TELA.
 *  Parâmetro: Nada
 *  Ação:      Imprime texto na tela.
 *  Retorna:   Inteiro com o número da opção escolhida pelo usuário.
 */
int printMenu (void)
{
    printf("\nSelecione a operação: \n");
    printf("1. Soma \n2. Subtração\n3.Multiplicação\n4.Complemento");

    int escolha;
    scanf("%d", &escolha);

    printf("Digite um número (Notação em complemento de 2): \n  ");

    return escolha;
}

/*
 *  PERCORRE O NÚMERO BINÁRIO E O MOSTRA NA TELA DE FORMA CONTÍNUA.
 */
void printBin (int** bin, int len)
{
    int i = 0;
    while (i < len) {
        printf("%d", (*bin)[i]);
        i++;
    }
}

/*
 *  CALCULA A NEGAÇÃO DE UM NÚMERO BINÁRIO: Inverte os bits e soma +1
 *  Parâmetro: Vetor com o número binário (no sistema de representação do complemento de 2) a ser convertido
 *  Ação:      Faz o complemento de 2 do número de entrada: Inverte os bits e soma +1 (em notação de comp. 2: 01)
 *  Retorna:   Vetor com o número binário complemento
 */
int* complement (int **bin, int binLen)
{
    int* auxBin;    // Binário que representa +1 (01 em comp. 2)

    for (int i = 0; i < binLen; i++)
        (*bin)[i] = (*bin)[i] == 0 ? 1 : 0;

    auxBin = calloc(2 , sizeof(int));
    auxBin[0] = 0;
    auxBin[1] = 1;

    *bin = sum_binary(bin, &auxBin, binLen, 2);
    return *bin;
}

int* sub_binary (int** num1, int** num2, int num1Len, int num2Len)
{
    int* total = NULL;

    *num2 = complement(num2, num2Len);
    total = sum_binary(num1, num2, num1Len, num2Len);

    // Previne overflow
    if (   ((*num1)[0] == 0 && (*num2)[0] == 0 && total[0] == 1)
           || ((*num1)[0] == 1 && (*num2)[0] == 1 && total[0] == 0) ) {
        printf("ERRO DE OVERFLOW: Estes números não podem ser somados no sistema de representação de complemento de 2. Por favor, insira números com mais bits.");
        return NULL;
    }

    return total;
}

/*
 * Multiplicar todos os numeros como sendo positivos
 * fazer o complemento doproduto se necessário, seguindo rega de sinal
 */
int* mult_binary (int** num1, int** num2, int num1Len, int num2Len) {

    int* total = NULL;
    int totalLen;
    int startLen = num1Len;                                                 // Quantidade inicial de bits no multiplicando.
    int shift = 0;                                                          // "Empurrar" casas do multiplicando para a esquerda ao longo da multiplicação.
    int switchSign = 0;                                                     // 0) Falso, 1) Verdadeiro

    totalLen = num1Len > num2Len ? 2 * num1Len : 2 * num2Len;               // O produto sempre terá 2n dígitos, sendo n o número de dígito do maior operando

    total = calloc(totalLen, sizeof(int));

    /* Multiplicação binária somando os resultados parciais de dois a dois. */
    for(int i = num2Len - 1; i >= 0; i--) {
        *num1 = realloc(*num1, (num1Len + shift) * sizeof(int));
        num1Len = startLen + shift;
        for (int k = num1Len - 1; k > startLen - 1; k--)
            num1[k] = 0;

        if ((*num2)[i] == 1)
            total = sum_binary(num1, &total, num1Len, totalLen);

        shift++;
    }
    return total;
}
