/*
* http://www2.ic.uff.br/~boeres/slides_FAC/FAC-complemento-um-e-dois.pdf
* http://www.furtado.prof.ufu.br/site/teaching/SD/SD-Modulo2.pdf
* https://edisciplinas.usp.br/pluginfile.php/4228767/mod_resource/content/1/complemento2.pdf
* https://www.doc.ic.ac.uk/~eedwards/compsys/arithmetic/index.html
*/

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>  // Biblioteca para exibir caracteres do PT-BR

#define STR_BUF 1024
// Protótipo de funções
int printMenu(void);
int get_binary (int **bin);
void printBin (int** bin, int len);
int* sum_binary (int** num1, int** num2, int num1Len, int num2Len);
int* complement (int **bin, int binLen);
int* subt_binary (int** num1, int** num2, int num1Len, int num2Len);
/*
 *  CÁLCULA O COMPLEMENTO DE 2 DE UM NÚMERO BINÁRIO: Inverte os bits e soma +1
 *  Parâmetro: Vetor com o número binário (no sistema de representação do complemento de 2) a ser convertido
 *  Retorna: Vetor com o número binário complemento
 */

int* complement (int **bin, int binLen)
{
    int* auxBin;    // Binário que representa +1 (01 em comp. 2)

    for (int i = 0; i < binLen; i++)
        (*bin)[i] = (*bin)[i] == 0 ? 1 : 0;

    auxBin = calloc(2 , sizeof(int));
    auxBin[0] = 0;
    auxBin[1] = 1;

    *bin = sum_binary(bin, &auxBin, binLen, 2);
    return *bin;
}

int* subt_binary (int** num1, int** num2, int num1Len, int num2Len)
{
    int* total = NULL;

    *num2 = complement(num2, num2Len);
    total = sum_binary(num1, num2, num1Len, num2Len);

    return total;
}

int main ()
{
    setlocale(LC_ALL, "Portuguese");

    int* num1  = NULL;
    int* num2  = NULL;
    int* total = NULL;
    int num1Len, num2Len;         // Quantidade de dígitos nos operadores e no resultado.
    int totalLen;

    switch (printMenu())
    {
        case 1:
            num1Len = get_binary(&num1);
            printf("+ ");
            num2Len = get_binary(&num2);

            printBin(&num1, num1Len);
            printf(" + ");
            printBin(&num2, num2Len);
            printf("\n= ");

            total = sum_binary(&num1, &num2, num1Len, num2Len);
            printBin(&total, num2Len); // TODO
            break;

        case 2:
            num1Len = get_binary(&num1);
            printf("- ");
            num2Len = get_binary(&num2);

            total = subt_binary(&num1, &num2, num1Len, num2Len);
            printBin(&total, num2Len); // TODO
            break;
    }

    return 0;
}

int get_binary (int **bin)
{
    char binStr[STR_BUF];                   // Entrada do usuário.
    setbuf(stdin, NULL);
    fgets(binStr, STR_BUF, stdin);

    int binLen = 0;                              // Número de dígitos da entrada

    // Converte a string digitada para números em um vetor dinâmico
    for (int i = 0; binStr[i] != '\0' && binStr[i] != '\n'; i++) {
        binLen++;
        *bin = realloc(*bin, sizeof(int) * binLen);

        if (*bin == NULL) {
            printf("Falha ao alocar memória. Reinicie o programa.\n");
            exit(1);
        }

        (*bin)[i] = binStr[i] == '1' ? 1 : 0;
    }

    return binLen;
}

int* sum_binary (int** num1, int** num2, int num1Len, int num2Len)
{
    int* total = NULL;
    int totalLen;

    int idx1 = num1Len - 1;
    int idx2 = num2Len - 1;

    int carry  = 0;

    totalLen = num1Len > num2Len ? num1Len : num2Len;           // O resultado tem tantos dígitos quanto o maior numero
    total = calloc(totalLen, sizeof(int));

   /* printBin(num1, num1Len);
    printf(" + ");
    printBin(num2, num2Len);*/

    for (int i = totalLen - 1; i >= 0; i--) {                       // Despreza o último query, se houver
        int auxSum = 0 + carry;

        //printf("\ntotal[%d]: ", i);
        if (idx1 >= 0) {
            auxSum += (*num1)[idx1];
            //printf("%d + ", (*num1)[idx1]);
            idx1--;
        } else {
            //printf("1 + ");
            if ((*num1)[0] == 1)
                auxSum += 1;
        }

        if (idx2 >= 0) {
            auxSum += (*num2)[idx2];
            //printf("%d + ", (*num2)[idx2]);
            idx2--;
        } else {
            //printf("1 + ");
            if ((*num2)[0] == 1)
                auxSum += 1;
        }

        //printf("%d = ", carry);

        if (auxSum <= 1) {
            carry = 0;
        } else {
            auxSum = auxSum % 2;          // Soma o 'carry' ao dígito, mas sem sobrescrever o valor da soma desse mesmo dígito com o próximo
            carry = 1;
        }

        total[i] = auxSum;
        //printf("%d (+ %d)\n", auxSum, carry);
    }

    return total;
}

int printMenu (void)
{
    printf("Selecione a operação: \n");
    printf("1. Soma \n2. Subtração\n");

    int escolha;
    scanf("%d", &escolha);

    printf("Digite um número (Notação em complemento de 2): \n  ");

    return escolha;
}

void printBin (int** bin, int len)
{
    int i = 0;
    while (i < len) {
        printf("%d", (*bin)[i]);
        i++;
    }
}
