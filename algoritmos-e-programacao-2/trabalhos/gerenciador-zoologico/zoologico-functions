#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

#define TAM_STRING 256

typedef struct {
    char* codigo;
    char* nome;
    char* especie;
    float peso;
    float altura;
} info_animal;

/* PROTÓTIPOS DE FUNÇÕES */
void
editarNomesCatalogo        (char*** catalogo,  int qtd_setor);
char** alterarCatalogo     (char*** catalogo,  int qtd_setor, char c, int i_setor);
info_animal* alterarSetor  (info_animal** zoo, int tam_zoo, int tam_setor, char c, int i_setor);

void adicionarAnimal       (info_animal** zoo, int qtd_jaula, int qtd_animal);
void animalMaisPesado      (info_animal** zoo, char** catalogo, int qtd_setor, int tam_setor);

void printZoo              (info_animal* zoo,  char** catalogo, int qtd_setor, int qtd_jaula, int qtd_animal);
int  printMenu             (void);

void conferirMalloc        (void *ptr);
void continuar             (void);

int main ()
{
    setbuf(stdout, NULL);
    setlocale (LC_ALL, "Portuguese");

    info_animal* zoo;
    char** catalogo;
    int qtd_setor, qtd_jaula, qtd_animal;
    int tam_setor, tam_zoo;
    int i_setor;

    printf("Bem-vindo(a) ao Administrador de Zoológicos v1.0!\n Disciplina: Algoritmos e Programação II \t Discente: Rayane Reis Mota - 12311BSI233\n");
    printf("\t----------------------------------------------------------------------\t\n\n");

    // Coletar as dimensões do Zoológico.
    do {
        printf("[-] Insira o número de setores, de jaulas e de animais para começar:\n");
        scanf ("%d %d %d", &qtd_setor, &qtd_jaula, &qtd_animal);

        tam_zoo   = qtd_setor * qtd_jaula * qtd_animal;
        tam_setor = qtd_jaula * qtd_animal;

        if (tam_zoo <= 0 || tam_setor <= 0)
            printf("[!] Você deve inserir números positivos maiores que zero!\n\n");
    } while (tam_zoo <= 0 || tam_setor <= 0);

    continuar();

    // Alocar um array contíguo, representando a estrutura dinâmica de três dimensões que contém todos os animais.
    zoo = calloc (qtd_setor * qtd_jaula * qtd_animal, sizeof (info_animal));
    conferirMalloc (zoo);
    printf("[>] Zoológico alocado com espaço para %d animais.\n\n", qtd_setor * qtd_jaula * qtd_animal);

    // Alocar um array bidimensional, representando os nomes de cada setor, cujos setores estão na mesma ordem do vetor zoo[].
    catalogo = calloc (qtd_setor, sizeof (char *));
    conferirMalloc (catalogo);
    for (int i = 0; i < qtd_setor; i++)
        catalogo[i] = calloc (TAM_STRING + 1, sizeof (char));

    while(1) {
        setbuf(stdout, NULL);
    switch (printMenu ())
    {
        case 1:
            editarNomesCatalogo(&catalogo, qtd_setor);
            break;

        case 2:
            adicionarAnimal(&zoo, qtd_jaula, qtd_animal);
            break;

        case 3:
            animalMaisPesado(&zoo, catalogo, qtd_setor, tam_setor);
            break;

        case 4:
            zoo      = alterarSetor(&zoo, tam_zoo, tam_setor, 'a', 0);
            catalogo = alterarCatalogo(&catalogo, qtd_setor, 'a', i_setor);

            qtd_setor++;
            break;

        case 5:
            if (qtd_setor == 1)
            {
                printf("[!] Você não pode remover o único setor do Zoológico.\n");
                break;
            }

            do
            {
                printf("Insira o número do setor a ser removido: ");
                scanf("%d", &i_setor);
            } while (i_setor > qtd_setor || i_setor < 0);


            zoo      = alterarSetor(&zoo, tam_zoo, tam_setor, 'r', i_setor);
            catalogo = alterarCatalogo(&catalogo, qtd_setor, 'r', i_setor);

            qtd_setor--;
            break;

        case 6:
            printZoo(zoo, catalogo, qtd_setor, qtd_jaula, qtd_animal);
            break;

        case 7:
            printf("Saindo do sistema...\n");

            free(zoo);

            while(qtd_setor--)
                free(catalogo[qtd_setor]);
            free(catalogo);

            exit(0);
    } continuar(); }

}

/*
 * IMPRIMIR TODOS OS ANIMAIS DO ZOOLÓGICO.
 *      Acessa cada struct (animal) dentro do vetor zoo[], e imprime na tela seus respectivos dados.
 *      Parâmetros: Vetor com todos os animais, vetor com todos os nomes dos setores, dimensões do zoológico.
 * */
void printZoo (info_animal* zoo, char** catalogo, int qtd_setor, int qtd_jaula, int qtd_animal)
{
    int idx;
    for (int i_setor = 0; i_setor < qtd_setor; i_setor++)
    {
        printf("\t SETOR %d: ", i_setor + 1);
        if(strlen(catalogo[i_setor]) == 0)
            printf("- Sem nome - \t \n");
        else
            printf("\"%s\" \t \n", catalogo[i_setor]);

        printf("-------------------------------------------------\n");

        for (int i_jaula = 0; i_jaula < qtd_jaula; i_jaula++)
        {
            idx = (i_setor * qtd_jaula * qtd_animal + i_jaula * qtd_jaula);     // Aritmética do index para acessar cada elemento dentro do vetor.
            printf("[-] %dº jaula: \n", i_jaula + 1);

            if (zoo[idx].codigo == NULL)
            {
                printf("A jaula está vazia.\n\n");
                continue;
            }

            for (int i_animal = 0; i_animal < qtd_animal; i_animal++)
            {
                idx += i_animal;

                if (zoo[idx].codigo != NULL)
                {
                    printf("%d. %s (Cód.: %s): ", i_animal + 1, zoo[idx].nome, zoo[idx].codigo);
                    printf("%s \t %.2f quilos\t %.2f metros\n", zoo[idx].especie, zoo[idx].peso, zoo[idx].altura);
                } else {
                    printf("%d. Jaula vazia.", i_animal + 1);
                }
                printf("\n");
            }
        }
        printf("\n");
    }
}

/*
 * ADICIONAR UM ANIMAL AO VETOR ZOO[].
 *      Preenche os dados da struct (animal) na primeira posição vazia da jaula indicada, somente se a jaula tiver um espaço vago.
 *      Parâmetros: Endereço do vetor com todos os animais, dimensões do zoológico.
 * */
void adicionarAnimal (info_animal **zoo, int qtd_jaula, int qtd_animal)
{
    int i_setor, i_jaula, i_animal, idx;

    printf("\t-  Adicionar novo animal  -\t\n\n");

    do {
        printf("[>] Informe o número do setor e o número da jaula do animal: ");
        scanf ("%d %d", &i_setor, &i_jaula);

        if (i_setor <= 0 || i_jaula <= 0)
            printf("[!] Você está tentando acessar uma jaula e/ou setor que não existe!\n\n");
        } while (i_setor <= 0 || i_jaula <= 0);

    // Conversão da entrada humana em index para navegação no zoo[].
    i_animal = 0;
    i_jaula -= 1;
    i_setor -= 1;

    idx = i_setor * qtd_jaula * qtd_animal + i_jaula * qtd_jaula;       // Aritmética do index para acessar cada elemento dentro do vetor.

    // Localiza a primeira vaga não nula na jaula indicada.
    while ((*zoo)[idx + i_animal].codigo != NULL)
    {
        i_animal++;
        if (i_animal == qtd_animal)
        {
            printf("[!] Esta jaula já está com a sua capacidade máxima de animais.\n");
            return;
        }
    }

    idx += i_animal;
    printf("[>] Insira os dados do animal na %dº vaga da %dº Jaula do Setor %d.\n\n", i_animal+1, i_jaula+1, i_setor+1);

    setbuf (stdin, NULL);

    printf("Código: ");
    (*zoo)[idx].codigo = malloc (TAM_STRING);
    conferirMalloc ((*zoo)[idx].codigo);
    fgets ((*zoo)[idx].codigo, TAM_STRING, stdin);
    (*zoo)[idx].codigo[ strcspn((*zoo)[idx].codigo, "\n") ] = 0;         // Remove '\n' do final da string.
    setbuf (stdin, NULL);

    printf("Nome: ");
    (*zoo)[idx].nome = malloc (TAM_STRING);
    conferirMalloc ((*zoo)[idx].nome);
    fgets ((*zoo)[idx].nome, TAM_STRING, stdin);
    (*zoo)[idx].nome[ strcspn((*zoo)[idx].nome, "\n") ] = 0;            // Remove '\n' do final da string.
    setbuf (stdin, NULL);

    printf("Espécie: ");
    (*zoo)[idx].especie = malloc (TAM_STRING);
    conferirMalloc ((*zoo)[idx].especie);
    fgets ((*zoo)[idx].especie, TAM_STRING, stdin);
    (*zoo)[idx].especie[ strcspn((*zoo)[idx].especie, "\n") ] = 0;       // Remove '\n' do final da string.

    printf("Peso (maior que 0kg): ");
    do {
        setbuf (stdin, NULL);
        scanf ("%f", &((*zoo)[idx].peso));
    } while ((*zoo)[idx].peso <= 0);

    printf("Altura (maior que 0m): ");
    do {
        setbuf (stdin, NULL);
        scanf ("%f", &((*zoo)[idx].altura));
    } while ((*zoo)[idx].altura <= 0);

    printf("\n[!] %s adicionado(a) com sucesso.\n", (*zoo)[idx].nome);
    return;
}

/*
 * ENCONTRAR O ANIMAL MAIS PESADO EM UM SETOR ESCOLHIDO.
 *      Coleta uma entrada em string e localiza o índice do primeiro setor de nome igual. Encontra o animal de maior peso no setor indicado.
 *      Parâmetros: Endereço do vetor com todos os animais, vetor com todos os nomes dos setores, dimensões do zoológico.
 * */
void animalMaisPesado(info_animal **zoo, char **catalogo, int qtd_setor, int tam_setor)
{
    int i_setor = 0;                            // índice correspondente ao nome pesquisado
    double pesado_peso = 0;
    char pesado_nome[TAM_STRING];
    char pesquisa[TAM_STRING];

    printf("\t-  Procurar animal mais pesado de um Setor  -\t\n\n");
    printf("Insira o nome do setor onde pesquisar qual o animal mais pesado (Exatamente igual): ");
    setbuf (stdin, NULL);

    fgets(pesquisa, TAM_STRING, stdin);
    pesquisa[strcspn(pesquisa, "\n")] = 0;     // Remove '\n' do final da string.

    if(strcmp(pesquisa, "") == 0)
    {
        printf("[!] Erro: Campo de pesquisa em branco.\n");
        return;
    }

    // Compara a string pesquisada com cada índice no Catálogo.
    while (strcmp(pesquisa, catalogo[i_setor]) != 0)
    {
        if(i_setor < qtd_setor)
            i_setor++;
    }

    if (i_setor == qtd_setor)
    {
        printf("[!] O nome inserido não foi encontrado no Catálogo de Setores.\n");
        return;
    }

    // Aritmética para o primeiro elemento do setor informado (na primeira jaula).
    i_setor *= tam_setor;

    if ((*zoo)[i_setor].peso == 0)
    {
        printf("[!] O setor \"%s\" está vazio.\n", pesquisa);
        return;
    }

    // Percorre todos os animais da primeira à última posição do setor.
    for (int i_animal = i_setor; i_animal < (i_setor + tam_setor); i_animal++)
    {
        if ((*zoo)[i_animal].peso > pesado_peso)
        {
            pesado_peso = (*zoo)[i_animal].peso;
            strcpy(pesado_nome, (*zoo)[i_animal].nome);
        }
    }

    printf("[>] O animal mais pesado do Setor \"%s\" é o(a) %s (%0.2f kg).\n\n", pesquisa, pesado_nome, pesado_peso);
    return;
}

/*
 * VISUALIZAR OU EDITAR STRINGS DO CATÁLOGO.
 *      Preenche o catálogo a partir do último nome vazio. Ou imprime o nome de todos os setores.
 *      Parâmetros: Endereço do vetor de strings (Catálogo), dimensões do zoológico.
 * */
void editarNomesCatalogo(char*** catalogo, int qtd_setor)
{
    int escolha, nomeTam;

    printf("\t-  Catálogo de Setores  -\t\n\n");
    printf("1. Adicionar nomes à todos os setores sem nome.\n");
    printf("2. Visualizar nomes no Catálogo.\n");
    printf("3. Voltar.\n-> ");

    scanf("%d", &escolha);

    printf("\n");

    if(escolha == 3)
        return;

    // Imprimir nome de todos os setores.
    if(escolha == 2)
    {
        for (int i = 0; i < qtd_setor; i++)
        {
            printf("Setor %d:  ", i + 1);
            if(strlen ((*catalogo)[i]) == 0)
                printf("(Sem nome)\n");
            else
                printf("%s\n", (*catalogo)[i]);
        }
        printf("\n");
        return;
    }

    nomeTam = strlen ((*catalogo)[qtd_setor - 1]);              // Comprimento do nome do último setor no Catálogo.

    // Preencher catálogo, a partir do primeiro elemento vazio.
    if(nomeTam > 0)
        printf("[!] Todos os setores estão preenchidos, você não pode adicionar mais nenhum.\n");
    else {
        for (int i = 0; i < qtd_setor; i++)                     // Percorre o Catálogo em ordem, porém edita somente nomes vazios.
        {
            nomeTam = strlen ((*catalogo)[i]);
            if(nomeTam == 0)
            {
                printf("\n[-] Nomear Setor %d: ", i+1);
                setbuf(stdin, NULL);
                fgets((*catalogo)[i], 256, stdin);

                int char_aux = strcspn((*catalogo)[i], "\n");
                (*catalogo)[i][char_aux] = 0;                                  // Remove '\n' do final da string.
                printf("[>] Setor %d nomeado para \"%s\".\n", i+1, (*catalogo)[i]);
            } else {
                continue;
            }
        }
    }
    
    return;
}

/*
 * REALOCAR O ZOOLÓGICO PARA CONTER UM SETOR A MAIS OU UM A MENOS.
 *      Aloca um novo endereço na memória para um zoológico com maior ou menor capacidade. Reordena o vetor zoo[] ao excluir um setor.
 *      Parâmetros: Endereço do vetor com todos os animais, dimensões do zoológico,
 *                  caractere 'a' para "Adicionar Setor",
 *                  caractere 'r' para "Remover Setor",
 *                  índice do setor a ser removido.
 *      Retorna: Endereço na memória com espaço para mais N animais.
 * */
info_animal* alterarSetor(info_animal** zoo, int tam_zoo, int tam_setor, char c, int i_setor)
{
    info_animal* novo_zoo;
    novo_zoo = *zoo;

    // Remover setor e reordenar setores restantes.
    if(c == 'r')
    {
        i_setor = (i_setor - 1) * tam_setor;        // Conversão da entrada humana em index para navegação no zoo[].

        for (int i  = i_setor; i < tam_zoo; i++)
        {
            novo_zoo[i] = novo_zoo[i + tam_setor];
            novo_zoo = realloc(*zoo, (tam_zoo - tam_setor) * sizeof(info_animal));
            conferirMalloc(novo_zoo);
        }

        return novo_zoo;
    }
    // Adicionar setor. .
    else if(c == 'a')
    {
        novo_zoo = realloc(*zoo, (tam_zoo + tam_setor) * sizeof(info_animal));
        conferirMalloc(novo_zoo);

        return novo_zoo;
    }
}

/*
 * REALOCAR O CATÁLOGO PARA CONTER UM SETOR A MAIS OU UM A MENOS.
 *      Aloca um novo endereço na memória para um catálogo com maior ou menor capacidade. Reordena a ordem dos nomes ao excluir um setor.
 *      Parâmetros: Endereço do vetor de strings (Catálogo), e os memos da função editarNomesCatalogo(0).
 *      Retorna: Ponteiro para um endereço na memória com mais N espaços para palavras.
 * */
char** alterarCatalogo(char*** catalogo, int qtd_setor, char c, int i_setor)
{
    char** novo_catalogo;
    int tam_catalogo;

    novo_catalogo = *catalogo;
    tam_catalogo  = qtd_setor * sizeof(char *);

    // Remover nome do catálogo e reordenar nomes restantes.
    if(c == 'r')
    {
        if(qtd_setor == 1)
        {
            printf("[!] Você não pode remover o único setor do Zoológico.");
            return *catalogo;
        }

        for (int i = i_setor - 1; i < qtd_setor-1; i++)
            strcpy(novo_catalogo[i], novo_catalogo[i + 1]);
        novo_catalogo = realloc (*catalogo, tam_catalogo - sizeof(char *));
        conferirMalloc(novo_catalogo);
        printf("O Setor %d foi removido do Zoológico.\n", i_setor);
        return novo_catalogo;
    }
    // Adicionar espaço e título para mais um nome no catálogo.
    else if(c == 'a')
    {
        novo_catalogo = realloc(*catalogo, tam_catalogo + sizeof(char *));
        conferirMalloc(novo_catalogo);
        novo_catalogo[qtd_setor] = malloc(TAM_STRING);
        conferirMalloc(novo_catalogo);

        printf("[-] Insira o título do novo setor: ");
        setbuf(stdin, NULL);
        fgets(novo_catalogo[qtd_setor], TAM_STRING, stdin);
        printf("[>] Setor \"%s\" adicionado ao Zoológico.\n", novo_catalogo[qtd_setor]);

        return novo_catalogo;
    }
}

void continuar(void)
{
    printf("Aperte qualquer tecla para continuar...");
    setbuf(stdin, NULL);
    getchar();
    system("@cls||clear");     // Limpar a tela do terminal.
}

/* IMPRIMIR AS OPÇÕES AO USUÁRIO. */
int printMenu(void)
{
    printf( "----------  MENU  -------------\n \n");
    printf("1. Acessar catálogo de setores.\n");
    printf("2. Inserir animais em uma jaula de um setor. \n");
    printf("3. Procurar animal mais pesado de um dado setor. \n");
    printf("4. Inserir um novo setor. \n");
    printf("5. Remover um setor. \n");
    printf("6. Visualizar todos os animais do zoológico. \n");
    printf("7. Sair do sistema. \n");

    int i;
    printf("-> ");
    scanf  ("%d", &i);
    printf("\n");
    return i;
}

/* ASSEGURAR QUE UMA ALOCAÇÃO DE MEMÓRIA FOI BEM-SUCEDIDA. */
void conferirMalloc (void *ptr)
{
    if (ptr == NULL)
    {
        printf("[!] Erro ao alocar memória. Reinicie o programa.\n");
        exit (1);
    }
}
