#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h> // Biblioteca para impressão caracteres do PT-BR

#define TAM_STRING 256

typedef struct {
    char* codigo;
    char* nome;
    char* especie;
    float peso;
    float altura;
} info_animal;

// Protótipos de funções.
info_animal* iniciarZoo (int qtd_setor, int qtd_jaula, int qtd_animal);
void adicionarAnimal (info_animal **zoo, int qtd_setor, int qtd_jaula, int qtd_animal);
void animalMaisPesado (info_animal **zoo, int qtd_setor, int qtd_jaula, int qtd_animal);
void editarCatalogo (char** catalogo, int qtd_setor);

int printMenu ()
{
    printf("1. Acessar catálogo de setores.\n");
    printf("2. Inserir animais em uma jaula de um setor. \n");
    printf("3. Procurar animal mais pesado de um dado setor. \n");
    
    int i;
    printf("-> ");
    scanf("%d", &i);
    printf("\n");
    return i;
}

// Assegurar que uma determinada alocação de memória foi bem sucedida.
void conferirMalloc (void *ptr)
{
    if(ptr == NULL)
    {
        printf("[!] Erro ao alocar memória. Reinicie o programa.\n");
        exit(1);
    }
}

int main ()
{
    setlocale(LC_ALL, "Portuguese");
    
    info_animal* zoo;
    char** catalogo;
    int qtd_setor, qtd_jaula, qtd_animal;
    
    do {
        printf("Setores - jaulas em cada setor - animais em cada jaula\n");
        scanf("%d %d %d", &qtd_setor, &qtd_jaula, &qtd_animal);
    
        if(qtd_setor <= 0 || qtd_jaula <= 0 || qtd_animal <= 0)
            printf("[!] Você deve inserir um número positivo maior que zero!\n\n");
    } while (qtd_setor <= 0 || qtd_jaula <= 0 || qtd_animal <= 0);
    
    
    printf("[!] Aperte Enter para iniciar o sistema \n");
    getchar();
    
    // Aloca um array contíguo, representando a estrutura dinâmica de três dimensões que contém todos os animais. RETURN: Endereço na memória com espaço para todos os animais.   */
    zoo = calloc(qtd_setor * qtd_jaula * qtd_animal, sizeof(info_animal));
    conferirMalloc(zoo);
    printf("[-] Zoológico alocado com espaço para %d animais.\n\n", qtd_setor * qtd_jaula * qtd_animal);
    
    // Aloca um array bidimensional, representando os nomes de cada setor, em ordem.
    catalogo = malloc (qtd_setor * sizeof(char *));
    conferirMalloc(catalogo);
        for (int i = 0; i < qtd_setor; i++)
            catalogo[i] = malloc(TAM_STRING);

    switch (printMenu())
    {
        case 1:
            editarCatalogo (catalogo, qtd_setor);
            break;
        case 2:
            adicionarAnimal (&zoo, qtd_setor, qtd_jaula, qtd_animal);
            break;
            
        case 3:
            animalMaisPesado (&zoo, qtd_setor, qtd_jaula, qtd_animal);
            break;
    }
    return 0;   
}

/*  BRIEF: Preenche os dados da struct que representa o animal na primeira posição vazia da jaula indicada, somente se a jaula tiver um espaço vago. 
    PARAMS: Endereço do ponteiro que aponta para o primeiro animal do zoológico. 
    RETURN: Nada.   */
void adicionarAnimal (info_animal **zoo, int qtd_setor, int qtd_jaula, int qtd_animal)
{
    int i_jaula, i_setor, idx;
    int i_animal = 0;
    
    do {
        printf("[-] Informe o setor e a jaula do animal: ");
        scanf("%d %d", &i_setor, &i_jaula);
    
        if(i_setor > qtd_setor || i_jaula > qtd_jaula)
            printf("[!] Você está tentando acessar uma jaula e/ou setor que não existe!\n\n");
    } while (i_setor > qtd_setor || i_jaula > qtd_jaula);
    
    i_jaula -= 1;
    i_setor -= 1;
    
    // Artimética de ponteiro
    idx = i_setor * qtd_jaula * qtd_animal + i_jaula * qtd_jaula; 
    
    // Localiza o primeiro espaço vago para animal na jaula indicada.
    while((*zoo)[idx + i_animal].codigo != NULL)
    {
        i_animal++;
        if(i_animal == qtd_animal)
        {
            printf("[!] Esta jaula já está com a sua capacidade máxima de animais.");
            return;
        }
    }
    
    idx += i_animal;
    printf("[-] Insira os dados do animal na %dº vaga da %dº Jaula do Setor %d (zoo[%d][%d][%d]).\n\n", i_animal+1, i_jaula+1, i_setor+1, i_setor, i_jaula, i_animal);
    
    setbuf(stdin, NULL);
    
    printf("Código: ");
    (*zoo)[idx].codigo = malloc(TAM_STRING);
    conferirMalloc((*zoo)[idx].codigo);
    fgets((*zoo)[idx].codigo, TAM_STRING, stdin);
    
    setbuf(stdin, NULL);
    
    printf("Nome: ");
    (*zoo)[idx].nome = malloc(TAM_STRING);
    conferirMalloc((*zoo)[idx].nome);
    fgets((*zoo)[idx].nome, TAM_STRING, stdin);
    
    setbuf(stdin, NULL);
    
    printf("Espécie: ");
    (*zoo)[idx].especie = malloc(TAM_STRING);
    conferirMalloc((*zoo)[idx].especie);
    fgets((*zoo)[idx].especie, TAM_STRING, stdin);
    
    printf("Peso (maior que 0kg): ");
    do {
        scanf("%f", &((*zoo)[idx].peso));
    } while ((*zoo)[idx].peso == 0);
    
    printf("Altura (maior que 0m): ");
    do {
        scanf("%f", &((*zoo)[idx].altura));
    } while ((*zoo)[idx].altura == 0);
      
    printf("\n[!] %s adicionado(a) com sucesso.\n", (*zoo)[idx].nome);
    return; 
}

// TODO O setor tem que ser identificado por NOME
void animalMaisPesado (info_animal **zoo, int qtd_setor, int qtd_jaula, int qtd_animal)
{
    int i_setor;
    int idx;
    
    // Coleta o valor do setor do usuário.
    do {
        printf("Informe o setor: ");
        scanf("%d", &i_setor);
    
        if(i_setor > qtd_setor || i_setor <= 0)
            printf("[!] Você está tentando acessar um setor que não existe!\n\n");
    } while (i_setor > qtd_setor || i_setor <= 0);
    
    i_setor -= 1;
    info_animal maior;
    maior.peso = 0;
    
    // Aritmética para o primeiro elemento do setor informado
    idx = i_setor * qtd_jaula * qtd_animal;    
    
    if((*zoo)[idx].peso == 0)
    {
        printf("[!] O setor informado está vazio.\n");
        return;
    }
    
    // Percorre todos os animais do setor para encontrar o mais pesado deles.
    for (int i_animal = idx + 1; i_animal < qtd_animal * qtd_jaula; i_animal++)
    {
        if((*zoo)[i_animal].peso > maior.peso)
            maior = (*zoo)[i_animal];
    }
    
    printf("[!] O animal mais pesado do Setor %d é o(a) %s (%0.2f kg).\n\n", i_setor + 1, maior.nome, maior.peso);
    return;
}


/*  BRIEF: Preenche o catálogo a partir do último nome vazio.  
    PARAMS: Endereço do ponteiro que aponta para o primeiro nome do catálogo, quantidade de setores do zoológico. 
    RETURN: Nada.   */
void editarCatalogo (char** catalogo, int qtd_setor)
{
    int escolha;
    int aux = strlen (catalogo[qtd_setor - 1]);
    
    printf("1. Adicionar nome ao catálogo.\n");
    printf("2. Voltar.\n-> ");
    scanf("%d", &escolha);
    
    if(escolha == 2)
        return;
    
    // Preencher catálogo
    if(aux > 0)
        printf("[!] Todos os setores estão preenchidos, você não pode adicionar mais nenhum.\n");
    else {
        for (int i = 0; i < qtd_setor; i++)
        {
            aux = strlen (catalogo[i]);
            if(aux == 0)
            {
                printf("\n[-] Renomear Setor %d: ", i+1);
                setbuf(stdin, NULL);
                fgets(catalogo[i], 256, stdin);
                catalogo[i][strcspn(catalogo[i], "\n")] = 0;    // Remove '\n' do final da string. 
                printf("[!] Setor %d nomeado como \"%s\".\n", i+1, catalogo[i]);
            } else {
                continue;
            }
        }
    }
    return;
}
