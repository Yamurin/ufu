#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h> // Biblioteca para impressão de caracteres do PT-BR

#define TAM_STRING 256

typedef struct {
    char* codigo;
    char* nome;
    char* especie;
    float peso;
    float altura;
} info_animal;

// Protótipos de funções.

info_animal* alterarSetor(info_animal** zoo, int tam_zoo, int tam_setor, char c, int i_setor);
char** alterarCatalogo(char*** catalogo, int qtd_setor, char c, int i_setor);

void adicionarAnimal  (info_animal **zoo, int qtd_setor, int qtd_jaula, int qtd_animal);
void animalMaisPesado (info_animal **zoo, char **catalogo, int qtd_setor, int tam_setor, int tam_zoo);
void editarNomesCatalogo   (char*** catalogo, int qtd_setor);
void printZoo (info_animal* zoo, char** catalogo, int qtd_setor, int qtd_jaula, int qtd_animal);
void conferirMalloc(void *ptr);
int  printMenu (void);
void continuar();


int printMenu (void)
{
    printf("----------  MENU  -------------\n \n");
    printf("1. Acessar catálogo de setores.\n");
    printf("2. Inserir animais em uma jaula de um setor. \n");
    printf("3. Procurar animal mais pesado de um dado setor. \n");
    printf("4. Inserir um novo setor. \n");
    printf("5. Remover um setor\n");
    printf("6. Visualizar todos os animais do zoológico\n");

    int i;
    printf("-> ");
    scanf("%d", &i);
    printf("\n");
    return i;
}

// Assegurar que uma determinada alocação de memória foi bem sucedida.
void conferirMalloc (void *ptr)
{
    if(ptr == NULL)
    {
        printf("[!] Erro ao alocar memória. Reinicie o programa.\n");
        exit(1);
    }
}

int main ()
{
    setlocale(LC_ALL, "Portuguese");

    info_animal* zoo;
    char** catalogo;
    int qtd_setor, qtd_jaula, qtd_animal;

    int i_setor;
    int tam_setor, tam_zoo;
    do {
        printf("[-] Insira o número de setores, de jaulas e de animais:\n");
        scanf("%d %d %d", &qtd_setor, &qtd_jaula, &qtd_animal);

        tam_zoo   = qtd_setor * qtd_jaula * qtd_animal;
        tam_setor = qtd_jaula * qtd_animal;

        if(tam_zoo <= 0 || tam_setor <= 0)
            printf("[!] Você deve inserir um número positivo maior que zero!\n\n");
    } while (tam_zoo <= 0 || tam_setor <= 0);


    continuar();

    // Aloca um array contíguo, representando a estrutura dinâmica de três dimensões que contém todos os animais.
    zoo = calloc(qtd_setor * qtd_jaula * qtd_animal, sizeof(info_animal));
    conferirMalloc(zoo);
    printf("[>] Zoológico alocado com espaço para %d animais.\n\n", qtd_setor * qtd_jaula * qtd_animal);

    // Aloca um array bidimensional, representando os nomes de cada setor, em ordem.
    catalogo = calloc(qtd_setor, sizeof(char *));
    conferirMalloc(catalogo);
    for (int i = 0; i < qtd_setor; i++)
        catalogo[i] = calloc(TAM_STRING + 1, sizeof(char));

    ///////// BLOCO PARA TESTE ////////////////////////////////////////////////
    strcpy(catalogo[0], "mamiferos");
    strcpy(catalogo[1], "repteis");
    strcpy(catalogo[2], "aveis");
    strcpy(catalogo[3], "peixes");
    strcpy(catalogo[4], "anfibios");
    strcpy(catalogo[5], "insetos");

   //////////////////////////////////////////////////////////////////////////



    while(1) {
    switch (printMenu())
    {
        case 1:
            editarNomesCatalogo (&catalogo, qtd_setor);
            continuar();
            break;

        case 2:
            adicionarAnimal (&zoo, qtd_setor, qtd_jaula, qtd_animal);
            break;

        case 3:
            animalMaisPesado (&zoo, catalogo, qtd_setor, tam_setor, tam_zoo);
            break;

        case 4:

            zoo = alterarSetor (&zoo, tam_zoo, tam_setor, 'a', 0);
            catalogo = alterarCatalogo(&catalogo, qtd_setor, 'a', i_setor);
            qtd_setor++;
            break;

        case 5:
            printf("Insira o número do setor a ser removido: ");
            scanf("%d", &i_setor);

            zoo = alterarSetor (&zoo, tam_zoo, tam_setor, 'r', i_setor);
            catalogo = alterarCatalogo(&catalogo, qtd_setor, 'r', i_setor);

            qtd_setor--;

            break;

        case 6:
            printZoo (zoo, catalogo, qtd_setor, qtd_jaula, qtd_animal);
            break;
    }

    }
return 0;
}

void printZoo (info_animal* zoo, char** catalogo, int qtd_setor, int qtd_jaula, int qtd_animal)
{
    for (int i_setor = 0; i_setor < qtd_setor; i_setor++)
    {
        printf("\t SETOR %d: \"%s\" \t \n", i_setor + 1, catalogo[i_setor]);
        printf("-------------------------------------------------\n");
        for (int i_jaula = 0; i_jaula < qtd_jaula; i_jaula++)
        {
            int idx = (i_setor * qtd_jaula * qtd_animal + i_jaula * qtd_jaula);
            printf("[-] %dº jaula: \n", i_jaula + 1);

            if(zoo[idx].codigo == NULL)
            {
                printf("A jaula está vazia.\n\n");
                continue;
            }

            for (int i_animal = 0; i_animal < qtd_animal; i_animal++)
            {
                idx += i_animal;

                if(zoo[idx].codigo != NULL)
                {
                    printf("%d. %s (Cód.: %s): ", i_animal + 1, zoo[idx].nome, zoo[idx].codigo);
                    printf("%s \t %.2f quilos\t %.2f metros\n", zoo[idx].especie, zoo[idx].peso, zoo[idx].altura);
                } else {
                    printf("%d. Jaula vazia.", i_animal + 1);
                }
                printf("\n");
            }
        }
        printf("\n\n");
    }
}
/*  BRIEF: Preenche os dados da struct que representa o animal na primeira posição vazia da jaula indicada, somente se a jaula tiver um espaço vago.
    PARAMS: Endereço do ponteiro que aponta para o primeiro animal do zoológico.
    RETURN: Nada.   */
void adicionarAnimal (info_animal **zoo, int qtd_setor, int qtd_jaula, int qtd_animal)
{
    int i_jaula, i_setor, idx;
    int i_animal = 0;

    printf("\t-  Adicionar novo animal  -\t\n\n");
    do {
        printf("[>] Informe o número do setor e o número da jaula do animal: ");
        scanf("%d %d", &i_setor, &i_jaula);

        if(i_setor <= 0 || i_jaula <= 0)
            printf("[!] Você está tentando acessar uma jaula e/ou setor que não existe!\n\n");
        } while (i_setor <= 0 || i_jaula <= 0);

    i_jaula -= 1;
    i_setor -= 1;

    // Artimética de ponteiro
    idx = i_setor * qtd_jaula * qtd_animal + i_jaula * qtd_jaula;

    // Localiza o primeiro espaço vago para animal na jaula indicada.
    while((*zoo)[idx + i_animal].codigo != NULL)
    {
        i_animal++;
        if(i_animal == qtd_animal)
        {
            printf("[!] Esta jaula já está com a sua capacidade máxima de animais.\n");
            return;
        }
    }

    idx += i_animal;
    printf("[>] Insira os dados do animal na %dº vaga da %dº Jaula do Setor %d.\n\n", i_animal+1, i_jaula+1, i_setor+1);

    setbuf(stdin, NULL);

    printf("Código: ");
    (*zoo)[idx].codigo = malloc(TAM_STRING);
    conferirMalloc((*zoo)[idx].codigo);
    fgets((*zoo)[idx].codigo, TAM_STRING, stdin);

    setbuf(stdin, NULL);

     printf("Nome: ");
     (*zoo)[idx].nome = malloc(TAM_STRING);
     conferirMalloc((*zoo)[idx].nome);
     fgets((*zoo)[idx].nome, TAM_STRING, stdin);

    setbuf(stdin, NULL);

     printf("Espécie: ");
     (*zoo)[idx].especie = malloc(TAM_STRING);
     conferirMalloc((*zoo)[idx].especie);
     fgets((*zoo)[idx].especie, TAM_STRING, stdin);

     printf("Peso (maior que 0kg): ");
     do {
         setbuf(stdin, NULL);
         scanf("%f", &((*zoo)[idx].peso));
     } while ((*zoo)[idx].peso <= 0);

     printf("Altura (maior que 0m): ");
     do {
         setbuf(stdin, NULL);
         scanf("%f", &((*zoo)[idx].altura));
     } while ((*zoo)[idx].altura <= 0);

    printf("\n[!] %s adicionado(a) com sucesso.\n", (*zoo)[idx].nome);
    return;
}

/*  BRIEF: Encontra o animal mais pesado dentre todos os animais de todas as jaulas de um setor.
    PARAMS: ZOológico, catálogo.
    RETURN: Nada.   */
void animalMaisPesado (info_animal **zoo, char **catalogo, int qtd_setor, int tam_setor, int tam_zoo)
{
    int i_setor = 0;    // Setor correspondente ao valor pesquisado
    int i;        // Variável genérica para armazenar um index
    char pesquisa[TAM_STRING];
    double pesadoPeso = 0;
    char pesadoNome[TAM_STRING];

    printf("Insira o nome do setor onde pesquisar qual o animal mais pesado (Exatamente igual): ");
    setbuf(stdin, NULL);
    fgets(pesquisa, TAM_STRING, stdin);
    pesquisa[strcspn(pesquisa, "\n")] = 0;     // Remove '\n' do final da string.

    // Parsing do nome digitado pelo usuário com o index correspondente
    for (i = 0; i < qtd_setor; i++)
    {
        if( strcmp(pesquisa, catalogo[i]) == 0 )            // Strcmp retorna "true" (0) se verdadeiro
        {
            i_setor = i;
            break;
        }
    }

    if(i == qtd_setor)
    {
        printf("[!] O nome inserido não foi encontrado no Catálogo de Setores.\n");
        return;
    }

    // Aritmética para o primeiro elemento do setor informado (na primeira jaula)
    i = i_setor * tam_setor;

    if((*zoo)[i].peso == 0)
    {
        printf("[!] O setor informado está vazio.\n");
        return;
    }

    // Percorre todos os animais de toda a extensão do setor para encontrar o mais pesado deles.
    for (int i_animal = i; i_animal < (i + tam_setor); i_animal++)
    {
        if((*zoo)[i_animal].peso > pesadoPeso)
        {
            pesadoPeso = (*zoo)[i_animal].peso;
            strcpy(pesadoNome, (*zoo)[i_animal].nome);
        }
    }

    printf("[>] O animal mais pesado do Setor %d é o(a) %s (%0.2f kg).\n\n", i_setor + 1,  pesadoNome, pesadoPeso);
    return;
}


/*  BRIEF: Preenche o catálogo a partir do último nome vazio.
    PARAMS: Endereço do catálogo, quantidade de setores do zoológico.
    RETURN: Nada.   */
void editarNomesCatalogo (char*** catalogo, int qtd_setor)
{
    int escolha;
    int nomeTam = strlen ((*catalogo)[qtd_setor - 1]);     // Variável auxiliar para conferir se o último nome de setor está vazio

    printf("\t-  Catálogo de Setores  -\t\n\n");
    printf("1. Adicionar nomes à todos os setores sem nome.\n");
    printf("2. Visualizar nomes no Catálogo.\n");
    printf("3. Voltar.\n-> ");

    scanf("%d", &escolha);

    printf("\n");

    if(escolha == 3)
        return;

    if(escolha == 2)
    {
        for (int i = 0; i < qtd_setor; i++)
        {
            printf("Setor %d:  ", i + 1);
            nomeTam = strlen ((*catalogo)[i]);
            if(nomeTam == 0)
                printf("(Sem nome)\n");
            else
                printf("%s\n", (*catalogo)[i]);
        }
        printf("\n");
        return;
    }

    // Preencher catálogo, a partir do primeiro elemento vazio
    if(nomeTam > 0)
        printf("[!] Todos os setores estão preenchidos, você não pode adicionar mais nenhum.\n");
    else {
        for (int i = 0; i < qtd_setor; i++)
        {
            nomeTam = strlen ((*catalogo)[i]);
            if(nomeTam == 0)
            {
                printf("\n[-] Nomear Setor %d: ", i+1);
                setbuf(stdin, NULL);
                fgets((*catalogo)[i], 256, stdin);

                int aux = strcspn((*catalogo)[i], "\n");
                (*catalogo)[i][aux] = 0;                                                   // Remove '\n' do final da string.
                printf("[>] Setor %d nomeado para \"%s\".\n", i+1, (*catalogo)[i]);
            } else {
                continue;
            }
        }
    }

    printf("\n");
    return;
}


info_animal* alterarSetor(info_animal** zoo, int tam_zoo, int tam_setor, char c, int i_setor)
{
    info_animal* novo_zoo;
    novo_zoo = *zoo;

    // Remover setor e reordenar estrutura do zoológico.
    if(c == 'r')
    {
        i_setor = (i_setor - 1) * tam_setor;

        for (int i  = i_setor; i < tam_zoo; i++)
        {
            novo_zoo[i] = novo_zoo[i + tam_setor];
            novo_zoo = realloc(*zoo, (tam_zoo - tam_setor) * sizeof(info_animal));
            conferirMalloc(novo_zoo);
        }

        return novo_zoo;
    }
    // Adicionar setor .
    else if(c == 'a')
    {
        novo_zoo = realloc(*zoo, (tam_zoo + tam_setor) * sizeof(info_animal));
        conferirMalloc(novo_zoo);

        return novo_zoo;
    }
}

char** alterarCatalogo(char*** catalogo, int qtd_setor, char c, int i_setor)
{
    char** novo_catalogo;
    novo_catalogo = *catalogo;
    int tam_catalogo = qtd_setor * sizeof(char *);

    // Remover nome do catálogo e reodernar.
    if(c == 'r')
    {
        for (int i = i_setor - 1; i < qtd_setor - 2; i++)
            strcpy(novo_catalogo[i], novo_catalogo[i + 1]);
        novo_catalogo = realloc (novo_catalogo, tam_catalogo - sizeof(char *));

        printf("O Setor %d foi removido do Zoológico.\n", i_setor);
        return novo_catalogo;
    }
    // Adicionar espaço para mais um nome no catálogo.
    else if(c == 'a')
    {
        novo_catalogo = realloc(*catalogo, tam_catalogo + sizeof(char *));
        conferirMalloc(novo_catalogo);
        novo_catalogo[qtd_setor] = malloc(TAM_STRING);

        printf("[-] Insira o título do novo setor: ");
        setbuf(stdin, NULL);
        fgets(novo_catalogo[qtd_setor], TAM_STRING, stdin);
        printf("[>] Setor \"%s\" adicionado ao Zoológico.\n", novo_catalogo[qtd_setor]);

        return novo_catalogo;
    }
}

void continuar (void)
{
    printf("Aperte qualquer tecla para continuar...");
    setbuf(stdin, NULL);
    getchar();
    system("@cls||clear");     // Limpar a tela do terminal.
}
